# This file is generated by Terraformm, do not edit it directly.
# To update it just execute "terraform apply" again.



%{~ for vpc_key, vpc_value in var_vpc_group["vpcs"] ~}
    %{~ for external_vpc_peering_key, external_vpc_peering_value in vpc_value["external_vpc_peerings"] ~}
module "vpc_peering_${vpc_key}_${external_vpc_peering_key}" {
  source  = "perceptionpoint/vpc-group/aws//vpc/routes/vpc_peering"
  providers = {
    aws = aws
    %{~ if lookup(external_vpc_peering_value, "external_accepter") ~}
    aws.peer_vpc = aws
    %{~ else ~}
    aws.peer_vpc = aws.external_vpc_peering_${vpc_key}_${external_vpc_peering_key}
    %{~ endif ~}
  }

  vpc_id = "${vpc_modules[vpc_key].vpc_id}"
  vpc_cidr_block = "${vpc_value["cidr_block"]}"
  route_tables = [
    %{~ for attach_sg in external_vpc_peering_value["attach_subnet_groups"] ~}
    "${vpc_modules[vpc_key].subnet_groups[attach_sg].route_table_id}",
    %{~ endfor ~}
  ]
  peer_vpc = {
    external_accepter = ${external_vpc_peering_value["external_accepter"]}
    aws_region = "${external_vpc_peering_value["aws_region"]}"
    vpc_id = "${external_vpc_peering_value["vpc_id"]}"
    %{~ if length(external_vpc_peering_value["rtbl_ids"]) > 0 ~}
    rtbl_ids = [
      %{~ for rtbl_id in external_vpc_peering_value["rtbl_ids"] ~}
      "${rtbl_id}",
      %{~ endfor ~}
    ]
    %{~ endif ~}
    account_id = "${external_vpc_peering_value["account_id"]}"
    cidr_block = "${external_vpc_peering_value["cidr_block"]}"
  }
}
    %{~ endfor ~}
%{~ endfor ~}
